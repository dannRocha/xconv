rule:
  version: 0.0.0
  changelog_file: CHANGELOG.md
  active_profile: xconv_default

  profiles: 
  - name: xconv_default
    tag:
      mode: alpha # alpha beta | default: standard
      format: v$version # v$major.$minor.$patch$"
      
    bump_map:
      'BREAKING CHANGE': MAJOR
      feature: MINOR
      bugfix: PATCH
      hotfix: PATCH

    bump_message: "version $current_version \u2192 $new_version"
    bump_pattern: ^(BREAKING[\-\ ]CHANGE|feature|hotfix|docs|bugfix|refactor|perf)(\(.+\))?(!)?

    changelog_pattern: ^(feature|bugfix|hotfix|perf|refactor)?(!)?

    change_type_map:
      feature: Feature
      bugfix: Bugfix
      hotfix: Hotfix
      perf: Performance
      docs: Documentation
      refactor: Refactor

    change_type_order:
      - BREAKING[\-\ ]CHANGE
      - feature
      - bugfix
      - hotfix
      - refactor
      - perf

    commit_parser: ^(?P<change_type>docs|feature|bugfix|hotfix|refactor|perf|BREAKING CHANGE)(?:\((?P<scope>[^()\r\n]*)\)|\()?(?P<breaking>!)?:\s(?P<message>.*)
    version_parser: (?P$version([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?(\w+)?)
    
    schema_pattern: (build|ci|docs|feature|bugfix|hotfix|perf|refactor|style|test|chore|revert|bump):(\(\S+\))?!?:(\s.*)

    schema: |
      <prefix>(<scope>): <subject>
      <BLANK LINE>
      <body>
      <BLANK LINE>
      (BREAKING CHANGE: <footer> )
      <footer>
    
    example: |
      bugfix: correct minor typos in code

      see the work item for details on the typos fixed

      related work items #12
    
    info: This is default info from xconv
    info_path: xconv_info.txt

    message_template: | 
      {{prefix}}({{scope}}): {{subject}}
      
      {% if body != '' %}
      {{body}}
      {% endif %}

      {% if is_breaking_change %}
      BREAKING CHANGE: 
      {% endif %}
      {% if footer != '' %}
      Related work items: #{{footer}}
      {% endif %}
    questions:
      - type: list
        message: "Select the type of change you are committing:"
        name: prefix
        choices:
          - value: feature
            key: f
            name: "feature: A new feature."

          - value: bugfix
            name: "bugfix: A bug fix. Correlates with PATCH in SemVer"
            key: b

          - value: hotfix
            name: "hotfix: A bug fix in PROD"
            key: h

          - value: docs
            name: "docs: Documentation only changes"
            key: d

          - value: style
            name: "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"
            key: s

          - value: refactor
            name: "refactor: A code change that neither fixes a bug nor adds a feature"
            key: r

          - value: perf
            name: "perf: A code change that improves performance"
            key: p

          - value: test
            name: "test: Adding missing or correcting existing tests"
            key: t

          - value: chore
            name: "chore: Changes to configuration files  (example scopes: .gitignore, .xconv.yaml)"
            key: z

          - value: build
            name: "build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm)"
            key: x

          - value: ci
            name: "ci: Changes to our CI configuration files and scripts (example scopes: AzureDevOps)"
            key: c

      - type: input
        message: "What is the scope of this change? (class or file name): (press [enter] to skip): "
        name: scope
        middleware: 
        - to_lower_case
        - trim
        filter: is_empty
        # editor: true # Open editor. Given undefined GIT_EDITOR and EDITOR try open [code, nano, vim, vi]
        # default: "Default value for name field"

      - type: input
        message: "Write a short and imperative summary of the code changes: (lower case and no period): "
        name: subject
        middleware: 
        - to_lower_case
        - trim
        filter: is_empty
        # editor: true # Open editor. Given undefined GIT_EDITOR and EDITOR try open [code, nano, vim, vi]
        # default: "Default value for name field"

      - type: input
        message: "Provide additional contextual information about the code changes: (press [enter] to skip): "
        name: body
        middleware:
        - to_lower_case
        # editor: true # Open editor. Given undefined GIT_EDITOR and EDITOR try open [code, nano, vim, vi]
        # filter: is_empty
        # default: "Default value for name field"

      - type: confirm
        name: is_breaking_change
        message: "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer (press [enter] to skip): "
        default: false

      - type: input
        message: "Related work items (PBI, Task IDs, Issue): (press [enter] to skip)"
        name: footer
        middleware:
        - to_lower_case
        # editor: true # Open editor. Given undefined GIT_EDITOR and EDITOR try open [code, nano, vim, vi]
        # default: "Default value for name field"

script:
  filters:
    - name: is_empty
      retry: true
      enable: true
      message:
        content: "[ALERT]: this field cannot be empty or only contain spaces"
        color: true
      # type: file # file or inline default 'inline'
      script: |
        function run(argument)
          return argument == nil or argument == ''
        end

  middlewares:
    - name: to_lower_case
      enable: true
      script: |
        function run(argument)
          return string.lower(argument)
        end

    - name: trim
      enable: true
      script: |
        function run(argument)
          return (string.gsub(argument, "^%s*(.-)%s*$", "%1"))
        end

  tasks:
  - name: push_tag
    enable: false
    language: sh # sh | lua
    bind: bump
    when: after
    script: |
      LATEST_TAG=$(git tag --list | sort -h | tail -n 1)
      git push origin $LATEST_TAG
  
  - name: echo
    enable: true
    language: lua # sh | lua
    bind: schema
    when: before
    script: |
      print("Hello World")

  - name: toogle_version
    enable: false
    language: sh # sh | lua
    bind: bump
    when: after # before
    script: |
      # running in current folder

      update_microservice_version() {

        NEW_VERSION=$(git tag --list | sort -h | tail -n 1)

        if [ -e pom.xml ]
        then

          MS_OLD_VERSION=$(cat pom.xml | grep '<ms.version>' | sed 's/<[^>]*>//g' | sed 's,^ *,,; s, *$,,')
          sed -i "s/$MS_OLD_VERSION/$NEW_VERSION/" pom.xml
          echo "Vers達o atual - pom.xml:  $MS_OLD_VERSION -> $NEW_VERSION"

          if [ -e Dockerfile ]
          then
            MS_NAME=$(cat pom.xml | grep '<ms.name>' | sed 's/<[^>]*>//g' | sed 's,^ *,,; s, *$,,')
            sed -i "s/$MS_NAME-$MS_OLD_VERSION/$MS_NAME-$NEW_VERSION/" Dockerfile
            echo "Vers達o atual - Dockerfile: $MS_NAME-$NEW_VERSION.jar"
          fi

          git add .
          git commit --amend --no-edit
        fi
      }

      update_frontend_version() {

        NEW_VERSION=$(git tag --list | sort -h | tail -n 1)

        if [ -e package.json ] ; then
            npm version "$NEW_VERSION"
            git rebase --autosquash HEAD~1 HEAD~2 ; \
            echo "Vers達o atual - package.json: $NEW_VERSION"
        fi
      }

      update_microservice_version
      update_frontend_version

      if [ ! -e package.json ] && [ ! -e Dockerfile ]
      then
        echo "Projeto Maven/Node n達o encontrado."
      fi